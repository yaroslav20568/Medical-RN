generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Laboratory {
  id            Int    @id @default(autoincrement())
  name          String @unique
  cityId        Int    @map("city_id")
  city          City   @relation(fields: [cityId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  region        String
  address       String
  coordinates   String
  phone         String
  email         String
  socialNetwork String @map("social_network")
  linkWebsite   String @map("link_website")
  description   String
  addInfo       String @map("add_info")
  workingHours  String @map("working_hours")
  typeId        Int    @map("type_id")
  type          Type   @relation(fields: [typeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  photo         String
  typesUsers    String @map("types_users")
}

model City {
  id         Int          @id @default(autoincrement())
  name       String       @unique
  countryId  Int          @map("city_id")
  country    Country      @relation(fields: [countryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Laboratory Laboratory[]
}

model Country {
  id   Int    @id @default(autoincrement())
  name String @unique
  city City[]
}

model Type {
  id         Int          @id @default(autoincrement())
  name       String       @unique
  laboratory Laboratory[]
}

model User {
  id         Int       @id @default(autoincrement())
  email      String    @unique
  password   String
  gender     String
  typesUsers String    @map("types_users")
  city       String
  imageUrl   String
  role       String
  message    Message[]
  dialog     Dialog[]
}

model TypeUser {
  id   Int    @id @default(autoincrement())
  name String @unique
}

model LibraryItem {
  id               Int            @id @default(autoincrement())
  libraryArticleId Int            @map("library_article_id")
  libraryArticle   LibraryArticle @relation(fields: [libraryArticleId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  title            String         @unique
  text             String
}

model LibraryArticle {
  id          Int           @id @default(autoincrement())
  name        String        @unique
  parent      Int
  libraryItem LibraryItem[]
}

model Dialog {
  id       Int       @id @default(autoincrement())
  userId   Int       @map("user_id")
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  adminId  Int       @map("admin_id")
  messages Message[]
}

model Message {
  id       Int     @id @default(autoincrement())
  time     String
  text     String
  userId   Int     @map("user_id")
  user     User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  dialogId Int     @map("dialog_id")
  dialog   Dialog  @relation(fields: [dialogId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  isRead   Boolean @map("is_read")
}

model Hotline {
  id         Int    @id @default(autoincrement())
  type       String @unique
  name       String
  phone      String
  services   String
  addInfo    String @map("add_info")
  typesUsers String @map("types_users")
}

model Quiz {
  id              Int              @id @default(autoincrement())
  name            String           @unique
  questions       Question[]
  questionsResult QuestionResult[]
}

model Question {
  id             Int              @id @default(autoincrement())
  name           String           @unique
  quizId         Int              @map("quiz_id")
  quiz           Quiz             @relation(fields: [quizId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  answers        QuestionAnswer[]
  questionResult QuestionResult[]
}

model QuestionAnswer {
  id             Int              @id @default(autoincrement())
  name           String           @unique
  questionId     Int              @map("question_id")
  question       Question         @relation(fields: [questionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  questionResult QuestionResult[]
}

model QuestionResult {
  id               Int            @id @default(autoincrement())
  quizId           Int            @map("quiz_id")
  quiz             Quiz           @relation(fields: [quizId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  questionId       Int            @map("question_id")
  question         Question       @relation(fields: [questionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  questionAnswerId Int            @map("question_answer_id")
  questionAnswer   QuestionAnswer @relation(fields: [questionAnswerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId           Int            @map("user_id")
}
